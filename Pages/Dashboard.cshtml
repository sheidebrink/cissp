@page
@model DashboardModel
@{
    ViewData["Title"] = "Dashboard - Kerbie";
}

<div class="container mt-4">
    <div class="text-center mb-4">
        <h1 class="display-3">
            <span class="kerbie-shield" style="position: relative; display: inline-block;">
                🛡️
                <span style="position: absolute; top: 15px; left: 35%; font-size: 0.4em; color: #333;">•</span>
                <span style="position: absolute; top: 15px; right: 35%; font-size: 0.4em; color: #333;">•</span>
                <span style="position: absolute; top: 25px; left: 50%; transform: translateX(-50%); font-size: 0.35em; color: #333;">‿</span>
            </span> 
            <strong>Kerbie</strong>
        </h1>
        <p class="lead">Your friendly CISSP study companion! 🎓</p>
        <p class="text-muted">Master the 8 domains with interactive quizzes, AI-powered insights, and comprehensive study materials.</p>
    </div>
    
    <div class="row justify-content-center mb-4">
        <div class="col-md-10">
            <div class="card border-info">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">🎆 Kerbie's Features</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>🎤 Voice Commands</h6>
                            <p class="small text-muted">Click the microphone button and try:</p>
                            <ul class="small">
                                <li><strong>"Kerbie Domain 1"</strong> - Navigate to any domain</li>
                                <li><strong>"Kerbie Quiz"</strong> - Start practice quiz</li>
                                <li><strong>"Kerbie Acronym CIA"</strong> - Get voice definition</li>
                                <li><strong>"Kerbie Home"</strong> - Return to home page</li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h6>📚 Study Tools</h6>
                            <ul class="small">
                                <li><strong>Interactive Quizzes</strong> - Domain-specific or mixed</li>
                                <li><strong>AI-Powered Questions</strong> - Generate new questions with AWS Nova</li>
                                <li><strong>Acronym Dictionary</strong> - 90+ searchable CISSP terms</li>
                                <li><strong>Reference Materials</strong> - OSI model, cryptography, malware, etc.</li>
                            </ul>
                        </div>
                    </div>
                    <div class="text-center mt-3">
                        <span class="badge bg-primary me-2">🎤 Voice Enabled</span>
                        <span class="badge bg-success me-2">🤖 AI Powered</span>
                        <span class="badge bg-info">📱 Mobile Friendly</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">🎯 Start Practice Quiz</h5>
                    <p class="card-text">Test your knowledge with randomized CISSP questions covering all 8 domains. Let Kerbie help you ace the exam!</p>
                    <a href="/Quiz" class="btn btn-primary btn-lg">🚀 Start Quiz</a>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mt-4">
        <div class="col-md-6 col-lg-3 mb-3">
            <div class="card h-100">
                <div class="card-body">
                    <h6 class="card-title">📊 Domain 1</h6>
                    <p class="card-text">Security and Risk Management</p>
                    @{
                        var domain1Time = Model.DomainTimes.ContainsKey("Domain 1 - Security and Risk Management") ? Model.DomainTimes["Domain 1 - Security and Risk Management"] : 0;
                        var minutes1 = domain1Time / 60;
                        var seconds1 = domain1Time % 60;
                    }
                    @if (domain1Time > 0)
                    {
                        <small class="text-muted">Study time: @minutes1 m @seconds1 s</small><br>
                    }
                    <a href="/Domain1" class="btn btn-outline-primary btn-sm">Learn More</a>
                </div>
            </div>
        </div>
        <div class="col-md-6 col-lg-3 mb-3">
            <div class="card h-100">
                <div class="card-body">
                    <h6 class="card-title">💼 Domain 2</h6>
                    <p class="card-text">Asset Security</p>
                    @{
                        var domain2Time = Model.DomainTimes.ContainsKey("Domain 2 - Asset Security") ? Model.DomainTimes["Domain 2 - Asset Security"] : 0;
                        var minutes2 = domain2Time / 60;
                        var seconds2 = domain2Time % 60;
                    }
                    @if (domain2Time > 0)
                    {
                        <small class="text-muted">Study time: @minutes2 m @seconds2 s</small><br>
                    }
                    <a href="/Domain2" class="btn btn-outline-primary btn-sm">Learn More</a>
                </div>
            </div>
        </div>
        <div class="col-md-6 col-lg-3 mb-3">
            <div class="card h-100">
                <div class="card-body">
                    <h6 class="card-title">🏢 Domain 3</h6>
                    <p class="card-text">Security Architecture and Engineering</p>
                    @{
                        var domain3Time = Model.DomainTimes.ContainsKey("Domain 3 - Security Architecture and Engineering") ? Model.DomainTimes["Domain 3 - Security Architecture and Engineering"] : 0;
                        var minutes3 = domain3Time / 60;
                        var seconds3 = domain3Time % 60;
                    }
                    @if (domain3Time > 0)
                    {
                        <small class="text-muted">Study time: @minutes3 m @seconds3 s</small><br>
                    }
                    <a href="/Domain3" class="btn btn-outline-primary btn-sm">Learn More</a>
                </div>
            </div>
        </div>
        <div class="col-md-6 col-lg-3 mb-3">
            <div class="card h-100">
                <div class="card-body">
                    <h6 class="card-title">🌐 Domain 4</h6>
                    <p class="card-text">Communication and Network Security</p>
                    @{
                        var domain4Time = Model.DomainTimes.ContainsKey("Domain 4 - Communication and Network Security") ? Model.DomainTimes["Domain 4 - Communication and Network Security"] : 0;
                        var minutes4 = domain4Time / 60;
                        var seconds4 = domain4Time % 60;
                    }
                    @if (domain4Time > 0)
                    {
                        <small class="text-muted">Study time: @minutes4 m @seconds4 s</small><br>
                    }
                    <a href="/Domain4" class="btn btn-outline-primary btn-sm">Learn More</a>
                </div>
            </div>
        </div>
        <div class="col-md-6 col-lg-3 mb-3">
            <div class="card h-100">
                <div class="card-body">
                    <h6 class="card-title">🔑 Domain 5</h6>
                    <p class="card-text">Identity and Access Management</p>
                    @{
                        var domain5Time = Model.DomainTimes.ContainsKey("Domain 5 - Identity and Access Management") ? Model.DomainTimes["Domain 5 - Identity and Access Management"] : 0;
                        var minutes5 = domain5Time / 60;
                        var seconds5 = domain5Time % 60;
                    }
                    @if (domain5Time > 0)
                    {
                        <small class="text-muted">Study time: @minutes5 m @seconds5 s</small><br>
                    }
                    <a href="/Domain5" class="btn btn-outline-primary btn-sm">Learn More</a>
                </div>
            </div>
        </div>
        <div class="col-md-6 col-lg-3 mb-3">
            <div class="card h-100">
                <div class="card-body">
                    <h6 class="card-title">🔍 Domain 6</h6>
                    <p class="card-text">Security Assessment and Testing</p>
                    @{
                        var domain6Time = Model.DomainTimes.ContainsKey("Domain 6 - Security Assessment and Testing") ? Model.DomainTimes["Domain 6 - Security Assessment and Testing"] : 0;
                        var minutes6 = domain6Time / 60;
                        var seconds6 = domain6Time % 60;
                    }
                    @if (domain6Time > 0)
                    {
                        <small class="text-muted">Study time: @minutes6 m @seconds6 s</small><br>
                    }
                    <a href="/Domain6" class="btn btn-outline-primary btn-sm">Learn More</a>
                </div>
            </div>
        </div>
        <div class="col-md-6 col-lg-3 mb-3">
            <div class="card h-100">
                <div class="card-body">
                    <h6 class="card-title">⚙️ Domain 7</h6>
                    <p class="card-text">Security Operations</p>
                    @{
                        var domain7Time = Model.DomainTimes.ContainsKey("Domain 7 - Security Operations") ? Model.DomainTimes["Domain 7 - Security Operations"] : 0;
                        var minutes7 = domain7Time / 60;
                        var seconds7 = domain7Time % 60;
                    }
                    @if (domain7Time > 0)
                    {
                        <small class="text-muted">Study time: @minutes7 m @seconds7 s</small><br>
                    }
                    <a href="/Domain7" class="btn btn-outline-primary btn-sm">Learn More</a>
                </div>
            </div>
        </div>
        <div class="col-md-6 col-lg-3 mb-3">
            <div class="card h-100">
                <div class="card-body">
                    <h6 class="card-title">💻 Domain 8</h6>
                    <p class="card-text">Software Development Security</p>
                    @{
                        var domain8Time = Model.DomainTimes.ContainsKey("Domain 8 - Software Development Security") ? Model.DomainTimes["Domain 8 - Software Development Security"] : 0;
                        var minutes8 = domain8Time / 60;
                        var seconds8 = domain8Time % 60;
                    }
                    @if (domain8Time > 0)
                    {
                        <small class="text-muted">Study time: @minutes8 m @seconds8 s</small><br>
                    }
                    <a href="/Domain8" class="btn btn-outline-primary btn-sm">Learn More</a>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Recent Security Breaches -->
    <div class="row justify-content-center mb-4">
        <div class="col-md-10">
            <div class="card border-danger">
                <div class="card-header bg-danger text-white">
                    <h5 class="mb-0">🚨 Why Security Matters - Recent Breaches</h5>
                </div>
                <div class="card-body">
                    <p class="text-muted mb-3">Real-world security incidents remind us why CISSP skills are critical:</p>
                    <div id="breachContent" class="row">
                        <!-- Dynamic content loaded here -->
                    </div>
                    
                    <div class="mt-3">
                        <div class="alert alert-warning">
                            <strong>📊 Key Statistics:</strong>
                            <ul class="small mb-0">
                                <li>Average data breach cost: <strong>$4.45M</strong> (IBM 2023)</li>
                                <li>Time to identify breach: <strong>207 days</strong> average</li>
                                <li>Time to contain breach: <strong>70 days</strong> average</li>
                                <li>Organizations with security AI: <strong>$1.76M less</strong> breach cost</li>
                            </ul>
                        </div>
                    </div>
                    
                    <div class="text-center">
                        <p class="small text-muted mb-2">Your CISSP certification helps prevent these incidents!</p>
                        <button id="refreshBreaches" class="btn btn-outline-danger btn-sm me-2">🔄 Show Different Breaches</button>
                        <span class="badge bg-danger me-2">🔒 Risk Management</span>
                        <span class="badge bg-warning me-2">🚫 Threat Prevention</span>
                        <span class="badge bg-info">🛡️ Incident Response</span>
                    </div>
                    
                    <script>
                    // Security Breach Database
                    const securityBreaches = [
                        { name: "MOVEit Transfer (2023)", impact: "2,100+ organizations, 62M+ individuals", cause: "SQL injection vulnerability", relevance: "Secure coding, vulnerability management", severity: "danger" },
                        { name: "LastPass (2022)", impact: "30M+ user vaults compromised", cause: "DevOps engineer's compromised endpoint", relevance: "Endpoint security, privileged access", severity: "warning" },
                        { name: "Toyota (2023)", impact: "2.15M customers exposed for 10 years", cause: "Misconfigured cloud database", relevance: "Cloud security, data classification", severity: "danger" },
                        { name: "Uber (2022)", impact: "Complete network compromise", cause: "Social engineering + MFA fatigue", relevance: "Security awareness, MFA design", severity: "warning" },
                        { name: "Medibank (2022)", impact: "9.7M customers' health data", cause: "Credential compromise, lateral movement", relevance: "Network segmentation, monitoring", severity: "info" },
                        { name: "Revolut (2022)", impact: "50,000+ customers' data accessed", cause: "Highly targeted social engineering", relevance: "Human factors, incident response", severity: "info" },
                        { name: "Equifax (2017)", impact: "147M+ personal records exposed", cause: "Unpatched Apache Struts vulnerability", relevance: "Patch management, vulnerability assessment", severity: "danger" },
                        { name: "SolarWinds (2020)", impact: "18,000+ organizations compromised", cause: "Supply chain attack via software update", relevance: "Supply chain security, code integrity", severity: "danger" },
                        { name: "Capital One (2019)", impact: "100M+ credit applications exposed", cause: "Misconfigured web application firewall", relevance: "Cloud security, access controls", severity: "warning" },
                        { name: "Marriott (2018)", impact: "500M+ guest records stolen", cause: "Advanced persistent threat (APT)", relevance: "Threat detection, incident response", severity: "danger" },
                        { name: "Target (2013)", impact: "40M+ credit/debit cards compromised", cause: "HVAC vendor credential compromise", relevance: "Third-party risk, network segmentation", severity: "warning" },
                        { name: "Yahoo (2013-2014)", impact: "3B+ user accounts compromised", cause: "State-sponsored attacks, weak encryption", relevance: "Cryptography, threat intelligence", severity: "danger" },
                        { name: "Anthem (2015)", impact: "78.8M+ healthcare records stolen", cause: "Spear phishing, lateral movement", relevance: "Email security, network monitoring", severity: "warning" },
                        { name: "Home Depot (2014)", impact: "56M+ payment cards compromised", cause: "Malware on POS systems", relevance: "Endpoint protection, payment security", severity: "info" },
                        { name: "Microsoft Exchange (2021)", impact: "250,000+ servers compromised globally", cause: "Zero-day vulnerabilities (Hafnium)", relevance: "Patch management, threat hunting", severity: "danger" },
                        { name: "Colonial Pipeline (2021)", impact: "US fuel supply disrupted for days", cause: "Ransomware via compromised VPN", relevance: "Business continuity, remote access security", severity: "warning" }
                    ];
                    
                    function getRandomBreaches(count = 6) {
                        const shuffled = [...securityBreaches].sort(() => 0.5 - Math.random());
                        return shuffled.slice(0, count);
                    }
                    
                    function renderBreaches() {
                        const breaches = getRandomBreaches(6);
                        const leftColumn = breaches.slice(0, 3);
                        const rightColumn = breaches.slice(3, 6);
                        
                        const renderColumn = (columnBreaches) => {
                            return columnBreaches.map(breach => `
                                <div class="breach-item mb-3 p-3 border-start border-${breach.severity} border-3">
                                    <h6 class="text-${breach.severity}">${breach.name}</h6>
                                    <p class="small mb-1"><strong>Impact:</strong> ${breach.impact}</p>
                                    <p class="small mb-1"><strong>Cause:</strong> ${breach.cause}</p>
                                    <p class="small text-muted"><strong>CISSP Relevance:</strong> ${breach.relevance}</p>
                                </div>
                            `).join('');
                        };
                        
                        document.getElementById('breachContent').innerHTML = `
                            <div class="col-md-6">
                                ${renderColumn(leftColumn)}
                            </div>
                            <div class="col-md-6">
                                ${renderColumn(rightColumn)}
                            </div>
                        `;
                    }
                    
                    // Initial load
                    renderBreaches();
                    
                    // Refresh button
                    document.getElementById('refreshBreaches').addEventListener('click', renderBreaches);
                    </script>
                </div>
            </div>
        </div>
    </div>
    

</div>

<!-- Confetti Canvas -->
<canvas id="confettiCanvas" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; z-index: 9999; display: none;"></canvas>

<script>
// Confetti Animation
class ConfettiPiece {
    constructor(canvas) {
        this.canvas = canvas;
        this.ctx = canvas.getContext('2d');
        this.x = Math.random() * canvas.width;
        this.y = -10;
        this.vx = (Math.random() - 0.5) * 4;
        this.vy = Math.random() * 3 + 2;
        this.rotation = Math.random() * 360;
        this.rotationSpeed = (Math.random() - 0.5) * 10;
        this.size = Math.random() * 8 + 4;
        this.colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57', '#ff9ff3', '#54a0ff'];
        this.color = this.colors[Math.floor(Math.random() * this.colors.length)];
    }
    
    update() {
        this.x += this.vx;
        this.y += this.vy;
        this.rotation += this.rotationSpeed;
        this.vy += 0.1; // gravity
    }
    
    draw() {
        this.ctx.save();
        this.ctx.translate(this.x, this.y);
        this.ctx.rotate(this.rotation * Math.PI / 180);
        this.ctx.fillStyle = this.color;
        this.ctx.fillRect(-this.size/2, -this.size/2, this.size, this.size);
        this.ctx.restore();
    }
    
    isOffScreen() {
        return this.y > this.canvas.height + 10;
    }
}

class ConfettiAnimation {
    constructor() {
        this.canvas = document.getElementById('confettiCanvas');
        this.ctx = this.canvas.getContext('2d');
        this.confetti = [];
        this.animationId = null;
        this.isRunning = false;
        
        this.resizeCanvas();
        window.addEventListener('resize', () => this.resizeCanvas());
    }
    
    resizeCanvas() {
        this.canvas.width = window.innerWidth;
        this.canvas.height = window.innerHeight;
    }
    
    start() {
        if (this.isRunning) return;
        
        this.isRunning = true;
        this.canvas.style.display = 'block';
        
        // Create initial burst of confetti
        for (let i = 0; i < 100; i++) {
            this.confetti.push(new ConfettiPiece(this.canvas));
        }
        
        this.animate();
        
        // Stop after 5 seconds
        setTimeout(() => this.stop(), 5000);
    }
    
    animate() {
        if (!this.isRunning) return;
        
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        
        // Update and draw confetti
        for (let i = this.confetti.length - 1; i >= 0; i--) {
            const piece = this.confetti[i];
            piece.update();
            piece.draw();
            
            if (piece.isOffScreen()) {
                this.confetti.splice(i, 1);
            }
        }
        
        // Add new confetti pieces occasionally
        if (Math.random() < 0.1 && this.confetti.length < 150) {
            this.confetti.push(new ConfettiPiece(this.canvas));
        }
        
        this.animationId = requestAnimationFrame(() => this.animate());
    }
    
    stop() {
        this.isRunning = false;
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
        }
        
        // Fade out
        setTimeout(() => {
            this.canvas.style.display = 'none';
            this.confetti = [];
        }, 2000);
    }
}

// Initialize confetti animation
const confettiAnimation = new ConfettiAnimation();

// Celebration button event
const celebrateBtn = document.getElementById('celebrateBtn');
if (celebrateBtn) {
    celebrateBtn.addEventListener('click', function() {
        // Start confetti animation
        confettiAnimation.start();
        
        // Show celebration message
        const btn = this;
        const originalText = btn.innerHTML;
        btn.innerHTML = '🎆 CONGRATULATIONS! 🎆';
        btn.classList.remove('btn-warning');
        btn.classList.add('btn-success');
        
        setTimeout(() => {
            btn.innerHTML = originalText;
            btn.classList.remove('btn-success');
            btn.classList.add('btn-warning');
        }, 3000);
    });
}
</script>